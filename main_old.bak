package main

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"github.com/mdp/qrterminal/v3"
	"go.mau.fi/whatsmeow"
	waProto "go.mau.fi/whatsmeow/binary/proto"
	"go.mau.fi/whatsmeow/proto/waE2E"
	"go.mau.fi/whatsmeow/store/sqlstore"
	"go.mau.fi/whatsmeow/types"
	"go.mau.fi/whatsmeow/types/events"
	typesevent "go.mau.fi/whatsmeow/types/events"
	waLog "go.mau.fi/whatsmeow/util/log"
	"google.golang.org/protobuf/proto"

	_ "github.com/mattn/go-sqlite3"
)

type Session struct {
	Client     *whatsmeow.Client
	Container  *sqlstore.Container
	SessionID  string
	Phone      string
	User       string
	IsLoggedIn bool
}

var (
	sessions     = make(map[string]*Session)
	sessionsLock = sync.RWMutex{}
)

func main() {
	r := gin.Default()

	r.POST("/wa/add", handleAddSession)
	r.GET("/wa/qr-image", handleQRImage)
	r.POST("/wa/status", handleStatus)
	r.POST("/wa/restart", handleRestart)
	r.POST("/wa/logout", handleLogout)
	r.POST("/wa/get", handleGetSessionID)

	r.POST("/send", handleSendMessage)
	r.POST("/send/file", func(c *gin.Context) { sendMediaHandler(c, "file") })
	r.POST("/send/image", func(c *gin.Context) { sendMediaHandler(c, "image") })
	r.POST("/send/video", func(c *gin.Context) { sendMediaHandler(c, "video") })

	r.POST("/msg/read", handleMarkRead)

	srv := &http.Server{Addr: ":8080", Handler: r}
	go func() {
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			fmt.Println("Server error:", err)
		}
	}()
	fmt.Println("ðŸš€ WhatsApp bot running on :8080")
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	fmt.Println("ðŸ›‘ Shutting down...")
	_ = srv.Shutdown(context.Background())
}

func handleAddSession(c *gin.Context) {
	var req struct {
		PhoneNumber string `json:"phone_number"`
		User        string `json:"user"`
	}
	if err := c.BindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request"})
		return
	}

	dbLog := waLog.Stdout("Database", "INFO", true)
	container, err := sqlstore.New("sqlite3", "file:"+req.User+".db?_foreign_keys=on", dbLog)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "DB error: " + err.Error()})
		return
	}

	deviceStore, err := container.GetFirstDevice()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Device error: " + err.Error()})
		return
	}

	client := whatsmeow.NewClient(deviceStore, waLog.Noop)
	sessionID := uuid.NewString()

	client.AddEventHandler(func(evt interface{}) {
		if _, ok := evt.(*typesevent.Connected); ok {
			sessionsLock.Lock()
			if session, exists := sessions[sessionID]; exists {
				session.IsLoggedIn = true
			}
			sessionsLock.Unlock()
		}
	})

	if client.Store.ID != nil {
		_ = client.Connect()
		c.JSON(http.StatusOK, gin.H{"msg": "Session already exists", "sessionId": sessionID})
	} else {
		sessionsLock.Lock()
		sessions[sessionID] = &Session{
			Client:     client,
			Container:  container,
			SessionID:  sessionID,
			Phone:      req.PhoneNumber,
			User:       req.User,
			IsLoggedIn: false,
		}
		sessionsLock.Unlock()

		_ = client.Connect()
		c.JSON(http.StatusOK, gin.H{"msg": "Scan QR code using /wa/qr-image", "sessionId": sessionID})
	}
}

func handleQRImage(c *gin.Context) {
	sessionID := c.Query("sessionId")
	if sessionID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Missing sessionId"})
		return
	}

	sessionsLock.RLock()
	sess, exists := sessions[sessionID]
	sessionsLock.RUnlock()
	if !exists {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Session not found"})
		return
	}

	if sess.Client != nil && !sess.IsLoggedIn {
		ch, _ := sess.Client.GetQRChannel(context.Background())
		if ch != nil {
			qr := <-ch
			if qr.Code != "" {
				c.Header("Content-Type", "image/png")
				qrterminal.GenerateHalfBlock(qr.Code, qrterminal.L, os.Stdout)
				return
			}
		}
	}
	c.JSON(http.StatusBadRequest, gin.H{"error": "No QR code available for this session"})
}

func handleSendMessage(c *gin.Context) {
	var req struct {
		PhoneNumber string `json:"phone_number"`
		User        string `json:"user"`
		Message     string `json:"message"`
		SessionID   string `json:"sessionId"`
	}
	if err := c.ShouldBindJSON(&req); err != nil || req.SessionID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Missing sessionId. Please call /wa/get to get your sessionId"})
		return
	}

	sessionsLock.RLock()
	sess, exists := sessions[req.SessionID]
	sessionsLock.RUnlock()
	if !exists {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Session not found"})
		return
	}

	jid := types.NewJID(req.PhoneNumber, "s.whatsapp.net")
	msg := &waProto.Message{Conversation: proto.String(req.Message)}
	_, err := sess.Client.SendMessage(context.Background(), jid, msg)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
	} else {
		c.JSON(http.StatusOK, gin.H{"msg": "Message sent"})
	}
}

func sendMediaHandler(c *gin.Context, mediaType string) {
	phone := c.PostForm("number_phone")
	caption := c.PostForm("caption")

	// Fix: c.Request.FormFile returns (multipart.File, *multipart.FileHeader, error)
	file, header, err := c.Request.FormFile("file")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "File required"})
		return
	}

	data, err := io.ReadAll(file)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to read file"})
		return
	}

	// Get sessionId from form data
	sessionID := c.PostForm("sessionId")
	if sessionID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "SessionId required"})
		return
	}

	sessionsLock.RLock()
	sess, exists := sessions[sessionID]
	sessionsLock.RUnlock()
	if !exists {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Session not found"})
		return
	}

	// Convert string mediaType to whatsmeow.MediaType
	var waMediaType whatsmeow.MediaType
	switch mediaType {
	case "image":
		waMediaType = whatsmeow.MediaImage
	case "video":
		waMediaType = whatsmeow.MediaVideo
	case "file":
		waMediaType = whatsmeow.MediaDocument
	}
	// Upload the file to WhatsApp using the session client
	resp, err := sess.Client.Upload(context.Background(), data, waMediaType)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Upload failed: " + err.Error()})
		return
	}

	// Build the message based on the media type (image, video, file)
	var msgProto *waE2E.Message
	switch mediaType {
	case "image":
		img := &waE2E.ImageMessage{
			Caption:       proto.String(caption),
			Mimetype:      proto.String(http.DetectContentType(data)),
			JPEGThumbnail: data[:100], // optional thumbnail
			URL:           &resp.URL,
			DirectPath:    &resp.DirectPath,
			MediaKey:      resp.MediaKey,
			FileEncSHA256: resp.FileEncSHA256,
			FileSHA256:    resp.FileSHA256,
			FileLength:    &resp.FileLength,
		}
		msgProto = &waE2E.Message{ImageMessage: img}
	case "video":
		vid := &waE2E.VideoMessage{
			Caption:       proto.String(caption),
			Mimetype:      proto.String(http.DetectContentType(data)),
			URL:           &resp.URL,
			DirectPath:    &resp.DirectPath,
			MediaKey:      resp.MediaKey,
			FileEncSHA256: resp.FileEncSHA256,
			FileSHA256:    resp.FileSHA256,
			FileLength:    &resp.FileLength,
		}
		msgProto = &waE2E.Message{VideoMessage: vid}
	case "file":
		doc := &waE2E.DocumentMessage{
			Caption:       proto.String(caption),
			FileName:      proto.String(header.Filename),
			Mimetype:      proto.String(http.DetectContentType(data)),
			URL:           &resp.URL,
			DirectPath:    &resp.DirectPath,
			MediaKey:      resp.MediaKey,
			FileEncSHA256: resp.FileEncSHA256,
			FileSHA256:    resp.FileSHA256,
			FileLength:    &resp.FileLength,
		}
		msgProto = &waE2E.Message{DocumentMessage: doc}
	}

	// Send the message
	jid := types.NewJID(phone, "s.whatsapp.net")
	_, err = sess.Client.SendMessage(context.Background(), jid, msgProto)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
	} else {
		c.JSON(http.StatusOK, gin.H{"msg": mediaType + " sent"})
	}
}

func handleStatus(c *gin.Context) {
	var req struct {
		SessionID string `json:"sessionId"`
	}
	_ = c.BindJSON(&req)

	sessionsLock.RLock()
	sess, exists := sessions[req.SessionID]
	sessionsLock.RUnlock()
	if !exists {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Session not found. Generate QR again"})
		return
	}

	if sess.IsLoggedIn {
		c.JSON(http.StatusOK, gin.H{"status": "online"})
	} else {
		c.JSON(http.StatusOK, gin.H{"status": "offline", "note": "Please scan QR again"})
	}
}

func handleRestart(c *gin.Context) {
	var req struct {
		PhoneNumber string `json:"phone_number"`
		User        string `json:"user"`
	}
	_ = c.BindJSON(&req)

	for sid, sess := range sessions {
		if sess.User == req.User && sess.Phone == req.PhoneNumber {
			delete(sessions, sid)
			newID := uuid.NewString()
			c.JSON(http.StatusOK, gin.H{"msg": "user already restarted", "sessionId": newID})
			return
		}
	}
	c.JSON(http.StatusOK, gin.H{"msg": "Already Waited", "sessionId": ""})
}

func handleLogout(c *gin.Context) {
	var req struct {
		SessionID string `json:"sessionId"`
	}
	_ = c.BindJSON(&req)

	sessionsLock.Lock()
	defer sessionsLock.Unlock()
	if sess, ok := sessions[req.SessionID]; ok {
		sess.Client.Logout()
		delete(sessions, req.SessionID)
		c.JSON(http.StatusOK, gin.H{"msg": "Already Waited", "sessionId": ""})
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Session not found"})
	}
}

func handleGetSessionID(c *gin.Context) {
	var req struct {
		PhoneNumber string `json:"phone_number"`
		User        string `json:"user"`
	}
	_ = c.BindJSON(&req)

	for sid, sess := range sessions {
		if sess.Phone == req.PhoneNumber && sess.User == req.User {
			c.JSON(http.StatusOK, gin.H{"sessionId": sid})
			return
		}
	}
	c.JSON(http.StatusBadRequest, gin.H{"error": "Session not found"})
}

func handleMarkRead(c *gin.Context) {
	var req struct {
		SessionID string `json:"sessionId"`
	}
	if err := c.BindJSON(&req); err != nil || req.SessionID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Missing sessionId. Please call /wa/get"})
		return
	}

	sessionsLock.RLock()
	sess, exists := sessions[req.SessionID]
	sessionsLock.RUnlock()
	if !exists {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Session not found"})
		return
	}

	msgChan := make(chan map[string]interface{}, 1)

	// Listen for the next incoming message and mark it read immediately
	handlerID := sess.Client.AddEventHandler(func(evt interface{}) {
		m, ok := evt.(*events.Message)
		if !ok || m.Info.IsFromMe {
			return
		}
		// Mark *this* message as read
		_ = sess.Client.MarkRead(
			[]types.MessageID{m.Info.ID},
			time.Now(),
			m.Info.Chat,
			m.Info.Sender,
		)
		msgChan <- map[string]interface{}{
			"from":      m.Info.Sender.User,
			"message":   m.Message.GetConversation(),
			"timestamp": m.Info.Timestamp.Format(time.RFC3339),
		}
	})

	defer sess.Client.RemoveEventHandler(handlerID)

	select {
	case msg := <-msgChan:
		c.JSON(http.StatusOK, gin.H{
			"msg":     "Message marked as read",
			"message": msg,
		})
	case <-time.After(10 * time.Second):
		c.JSON(http.StatusRequestTimeout, gin.H{"error": "No new messages received to mark as read"})
	}
}
